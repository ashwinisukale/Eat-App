# frozen_string_literal: true

require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe '/reservations', type: :request do
  # This should return the minimal set of attributes required to create a valid
  # Reservation. As you add validations to Reservation, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) do
    {
      "start_time": Time.now,
      "covers": 6,
      "status": 'pending',
      "notes": 'I will be 15 min late',
      "restaurant_id": restaurant.id,
      "user_id": user.id
    }
  end

  let(:invalid_attributes) do
    {
      "start_time": Time.now,
      "covers": '',
      "status": '',
      "notes": 'I will be 15 min late'
    }
  end

  let(:user) do
    User.create!(first_name: 'Ashwini', last_name: 'Sukale', email: 'ashwini@gmail.com', phone: '1234322423',
                 role: 'guest', restaurant_id: restaurant.id, password: '123456', password_confirmation: '123456')
  end

  let(:restaurant) do
    Restaurant.create!(name: 'Burj', cuisines: 'veg', phone: '242342342', email: 'burj@gmail.com', location: 'Dubai',
                       open_hours: 'Mon-Fri')
  end

  # This should return the minimal set of values that should be in the headers
  # in order to pass any filters (e.g. authentication) defined in
  # ReservationsController, or in your router and rack
  # middleware. Be sure to keep this updated too.
  let(:valid_headers) do
    token = JsonWebToken.encode(user_id: user.id)
    { 'Authorization': token, 'Content-Type': 'application/json' }
  end

  describe 'GET /index' do
    it 'renders a successful response' do
      Reservation.create! valid_attributes
      get api_v1_restaurant_reservations_path(restaurant_id: restaurant.id), headers: valid_headers, as: :json
      expect(response).to be_successful
    end
  end

  describe 'GET /show' do
    it 'renders a successful response' do
      reservation = Reservation.create! valid_attributes
      get api_v1_restaurant_reservation_path(restaurant_id: restaurant.id, id: reservation.id), headers: valid_headers,
                                                                                                as: :json
      expect(response).to be_successful
    end
  end

  describe 'POST /create' do
    context 'with valid parameters' do
      it 'creates a new Reservation' do
        expect do
          post api_v1_restaurant_reservations_path(restaurant_id: restaurant.id),
               params: { reservation: valid_attributes }, headers: valid_headers, as: :json
        end.to change(Reservation, :count).by(1)
      end

      it 'renders a JSON response with the new reservation' do
        post api_v1_restaurant_reservations_path(restaurant_id: restaurant.id),
             params: { reservation: valid_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:created)
        expect(response.content_type).to match(a_string_including('application/json'))
      end
    end

    context 'with invalid parameters' do
      it 'does not create a new Reservation' do
        expect do
          post api_v1_restaurant_reservations_path(restaurant_id: restaurant.id),
               params: { reservation: invalid_attributes }, as: :json
        end.to change(Reservation, :count).by(0)
      end

      it 'renders a JSON response with errors for the new reservation' do
        post api_v1_restaurant_reservations_path(restaurant_id: restaurant.id),
             params: { reservation: invalid_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:unprocessable_entity)
        expect(response.content_type).to match('application/json')
      end
    end
  end

  describe 'PATCH /update' do
    context 'with valid parameters' do
      let(:new_attributes) do
        {
          "start_time": Time.now,
          "covers": '5',
          "status": 'pending',
          "notes": 'I will be 15 min late'
        }
      end

      it 'updates the requested reservation' do
        reservation = Reservation.create! valid_attributes
        patch api_v1_restaurant_reservation_path(restaurant_id: restaurant.id, id: reservation.id),
              params: { reservation: new_attributes }, headers: valid_headers, as: :json
        reservation.reload
        expect(reservation.covers).to eq(5)
      end

      it 'renders a JSON response with the reservation' do
        reservation = Reservation.create! valid_attributes
        patch api_v1_restaurant_reservation_path(restaurant_id: restaurant.id, id: reservation.id),
              params: { reservation: new_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:ok)
        expect(response.content_type).to match(a_string_including('application/json'))
      end
    end

    context 'with invalid parameters' do
      it 'renders a JSON response with errors for the reservation' do
        reservation = Reservation.create! valid_attributes
        patch api_v1_restaurant_reservation_path(restaurant_id: restaurant.id, id: reservation.id),
              params: { reservation: invalid_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:unprocessable_entity)
        expect(response.content_type).to match('application/json')
      end
    end
  end

  describe 'DELETE /destroy' do
    it 'destroys the requested reservation' do
      reservation = Reservation.create! valid_attributes
      expect do
        delete api_v1_restaurant_reservation_path(restaurant_id: restaurant.id, id: reservation.id),
               headers: valid_headers, as: :json
      end.to change(Reservation, :count).by(-1)
    end
  end

  describe '#with Admin/Guest/Manager role' do
    let(:admin_reservation){
      admin = User.create!(first_name: 'Ashwini', last_name: 'Sukale', email: 'admin1@gmail.com', phone: '1234322423',
                   role: 'admin', restaurant_id: restaurant.id, password: '123456', password_confirmation: '123456')
      token = JsonWebToken.encode(user_id: admin.id)
      valid_headers = { 'Authorization': token, 'Content-Type': 'application/json' }
    }

    let(:guest_reservation){
      guest = User.create!(first_name: 'Ashwini', last_name: 'Sukale', email: 'guest1@gmail.com', phone: '1234322423',
                   role: 'fake', restaurant_id: restaurant.id, password: '123456', password_confirmation: '123456')
      token = JsonWebToken.encode(user_id: guest.id)
      valid_headers = { 'Authorization': token, 'Content-Type': 'application/json' }
    }

    let(:manager_reservation){
      manager = User.create!(first_name: 'Ashwini', last_name: 'Sukale', email: 'manager1@gmail.com', phone: '1234322423',
                   role: 'fake', restaurant_id: restaurant.id, password: '123456', password_confirmation: '123456')
      token = JsonWebToken.encode(user_id: manager.id)
      valid_headers = { 'Authorization': token, 'Content-Type': 'application/json' }
    }

    let(:create_reservation){
      expect do
        post api_v1_restaurant_reservations_path(restaurant_id: restaurant.id),
             params: { reservation: valid_attributes }, headers: valid_headers, as: :json
      end.to change(Reservation, :count).by(1)
    }

    it "admin should create reservation" do
      admin_reservation
      create_reservation
    end

    it "guest should create reservation" do
      guest_reservation
      create_reservation
    end

    it "manager should create reservation" do
      manager_reservation
      create_reservation
    end
  end

  describe '#with Non Admin/Guest/Manager role' do
    it "should not create reservation" do
      fake_user = User.create!(first_name: 'Ashwini', last_name: 'Sukale', email: 'fake_user@gmail.com', phone: '1234322423',
                   role: 'fake', restaurant_id: restaurant.id, password: '123456', password_confirmation: '123456')
      token = JsonWebToken.encode(user_id: fake_user.id)
      valid_headers = { 'Authorization': token, 'Content-Type': 'application/json' }
      expect do
        post api_v1_restaurant_reservations_path(restaurant_id: restaurant.id),
             params: { reservation: valid_attributes }, headers: valid_headers, as: :json
      end.to change(Reservation, :count).by(0)
    end
  end
end
