# frozen_string_literal: true

require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe '/guests', type: :request do
  # This should return the minimal set of attributes required to create a valid
  # Guest. As you add validations to Guest, be sure to
  # adjust the attributes here as well.

  let(:restaurant) do
    Restaurant.create!(name: 'Burj', cuisines: 'veg', phone: '242342342', email: 'burj@gmail.com', location: 'Dubai',
                       open_hours: 'Mon-Fri')
  end

  let(:user) do
    User.create!(first_name: 'Ashwini', last_name: 'Sukale', email: 'ashwini@gmail.com', phone: '1234322423',
                 role: 'admin', restaurant_id: restaurant.id, password: '123456', password_confirmation: '123456')
  end

  let(:valid_attributes) do
    {
      "first_name": 'Shahaji',
      "last_name": 'Bhosle',
      "email": 'bhosle@gmail.com',
      "phone": '4444444',
      "password": '123456',
      "password_confirmation": '123456',
      "restaurant_id": restaurant.id
    }
  end

  let(:invalid_attributes) do
    {
      "first_name": '',
      "last_name": 'Shinde',
      "email": 'shinde@gmail.com',
      "phone": '4444444'
    }
  end

  # This should return the minimal set of values that should be in the headers
  # in order to pass any filters (e.g. authentication) defined in
  # GuestsController, or in your router and rack
  # middleware. Be sure to keep this updated too.
  let(:token){
    JsonWebToken.encode(user_id: user.id)
  }
  let(:valid_headers) do
    { 'Authorization': token, 'Content-Type': 'application/json' }
  end

  describe 'GET /index' do
    it 'renders a successful response' do
      Guest.create! valid_attributes
      get api_v1_restaurant_guests_path(restaurant_id: restaurant.id), headers: valid_headers, as: :json
      expect(response).to be_successful
    end
  end

  describe 'GET /show' do
    it 'renders a successful response' do
      guest = Guest.create! valid_attributes
      get api_v1_restaurant_guest_path(restaurant_id: restaurant.id, id: guest.id), headers: valid_headers, as: :json
      expect(response).to be_successful
    end
  end

  describe 'POST /create' do
    context 'with valid parameters' do
      it 'creates a new Guest' do
        expect do
          post api_v1_restaurant_guests_path(restaurant_id: restaurant.id),
               params: { guest: valid_attributes }, headers: valid_headers, as: :json
        end.to change(Guest, :count).by(1)
      end

      it 'renders a JSON response with the new guest' do
        post api_v1_restaurant_guests_path(restaurant_id: restaurant.id),
             params: { guest: valid_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:created)
        expect(response.content_type).to match(a_string_including('application/json'))
      end
    end

    context 'with invalid parameters' do
      it 'does not create a new Guest' do
        expect do
          post api_v1_restaurant_guests_path(restaurant_id: restaurant.id),
               params: { guest: invalid_attributes }, as: :json
        end.to change(Guest, :count).by(0)
      end

      it 'renders a JSON response with errors for the new guest' do
        post api_v1_restaurant_guests_path(restaurant_id: restaurant.id),
             params: { guest: invalid_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:unprocessable_entity)
        expect(response.content_type).to match('application/json')
      end
    end
  end

  describe 'PATCH /update' do
    context 'with valid parameters' do
      let(:new_attributes) do
        {
          "first_name": 'Sambhaji',
          "last_name": 'bhosle',
          "email": 'sher@gmail.com',
          "phone": '4444444',
          "password": '123456',
          "password_confirmation": '123456',
          "restaurant_id": restaurant.id
        }
      end

      it 'updates the requested guest' do
        guest = Guest.create! valid_attributes
        patch api_v1_restaurant_guest_path(restaurant_id: restaurant.id, id: guest.id),
              params: { guest: new_attributes }, headers: valid_headers, as: :json
        guest.reload
        expect(guest.first_name).to eq('Sambhaji')
      end

      it 'renders a JSON response with the guest' do
        guest = Guest.create! valid_attributes
        patch api_v1_restaurant_guest_path(restaurant_id: restaurant.id, id: guest.id),
              params: { guest: new_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:ok)
        expect(response.content_type).to match(a_string_including('application/json'))
      end
    end

    context 'with invalid parameters' do
      it 'renders a JSON response with errors for the guest' do
        guest = Guest.create! valid_attributes
        patch api_v1_restaurant_guest_path(restaurant_id: restaurant.id, id: guest.id),
              params: { guest: invalid_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:unprocessable_entity)
        expect(response.content_type).to match('application/json')
      end
    end
  end

  describe 'DELETE /destroy' do
    it 'destroys the requested guest' do
      guest = Guest.create! valid_attributes
      expect do
        delete api_v1_restaurant_guest_path(restaurant_id: restaurant.id, id: guest.id), headers: valid_headers,
                                                                                         as: :json
      end.to change(Guest, :count).by(-1)
    end
  end

  describe '#with Admin role' do
    it "should create guest" do
      expect do
        post api_v1_restaurant_guests_path(restaurant_id: restaurant.id),
             params: { guest: valid_attributes }, headers: valid_headers, as: :json
      end.to change(Guest, :count).by(1)
    end
  end

  describe '#with Non Admin role' do
    it "should not create guest" do
      guest = User.create!(first_name: 'Ashwini', last_name: 'Sukale', email: 'ashwini@gmail.com', phone: '1234322423',
                   role: 'guest', restaurant_id: restaurant.id, password: '123456', password_confirmation: '123456')
      token = JsonWebToken.encode(user_id: guest.id)
      valid_headers = { 'Authorization': token, 'Content-Type': 'application/json' }
      expect do
        post api_v1_restaurant_guests_path(restaurant_id: restaurant.id),
             params: { guest: valid_attributes }, headers: valid_headers, as: :json
      end.to change(Guest, :count).by(0)
    end
  end
end
